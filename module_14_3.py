from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = '–ö–ª—é—á'

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

dp.middleware.setup(LoggingMiddleware())

# –ö–ª–∞–≤–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –∏ "–ö—É–ø–∏—Ç—å"
keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
button_info = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
button_buy = KeyboardButton('–ö—É–ø–∏—Ç—å')
keyboard.add(button_info, button_buy)

# Inline –∫–ª–∞–≤–∞ —Å –∏–≥—Ä–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
inline_buy_keyboard = InlineKeyboardMarkup(row_width=2)
products = [
    ("Mgame", "Lgame.jpg"),
    ("Lgame", "Mgame.jpg"),
    ("XLgame", "XLgame.jpg"),
    ("XXLgame", "XXLgame.jpg")
]

for product_name, _ in products:
    inline_buy_keyboard.add(InlineKeyboardButton(product_name, callback_data=product_name))

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
inline_back_keyboard = InlineKeyboardMarkup(row_width=1)
back_button = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
inline_back_keyboard.add(back_button)


# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@dp.message_handler(commands=['start'])
async def start(message: Message):
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    full_name = f"{first_name} {last_name}" if last_name else first_name
    await message.reply(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}! üòâ\n –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö –∏–≥—Ä–∞—Ö, –∫–Ω–æ–ø–∫–∞: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', –≤—ã–±–∏—Ä–∞–π—Ç–µ - –∫–Ω–æ–ø–∫–∞: '–ö—É–ø–∏—Ç—å'",
        reply_markup=keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )


# –ö—É–ø–∏—Ç—å
@dp.message_handler(Text(equals='–ö—É–ø–∏—Ç—å', ignore_case=True))
async def get_buying_list(message: Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=inline_buy_keyboard)


# Callback —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä –∏ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
@dp.callback_query_handler(lambda call: call.data in [product[0] for product in products])
async def send_product_image(call: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    for product_name, image_file in products:
        if call.data == product_name:
            with open(image_file, 'rb') as photo:
                await call.message.reply_photo(photo)
            break

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    await call.message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {call.data}. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üòâ")

    # –ö–∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    await call.message.reply("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", reply_markup=inline_back_keyboard)
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É


# Callback —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query_handler(lambda call: call.data == 'back')
async def go_back(call: CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=inline_buy_keyboard)
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.message_handler(Text(equals='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', ignore_case=True))
async def send_info(message: Message):
    info_text = (
        "–ú—ã –ø—Ä–æ–¥–∞—ë–º –ª—É—á—à–∏–µ –∏–≥—Ä—ã —É–∂–µ 2000 –ª–µ—Ç, –Ω–æ –≤—ã –Ω–∞–º –Ω–µ –ø–æ–≤–µ—Ä–∏—Ç–µ, –ø–æ—ç—Ç–æ–º—É —Å–∫–∞–∂–µ–º, —á—Ç–æ –¥–≤–∞ –¥–Ω—è"
    )
    await message.reply(info_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ About.jpg
    with open('About.jpg', 'rb') as photo:
        await message.reply_photo(photo)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler()
async def handle_any_text(message: Message):
    await send_info(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
